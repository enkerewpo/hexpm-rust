// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc 25.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `package.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:Package)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Package {
    // message fields
    // @@protoc_insertion_point(field:Package.releases)
    pub releases: ::std::vec::Vec<Release>,
    // @@protoc_insertion_point(field:Package.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:Package.repository)
    pub repository: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:Package.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Package {
    fn default() -> &'a Package {
        <Package as ::protobuf::Message>::default_instance()
    }
}

impl Package {
    pub fn new() -> Package {
        ::std::default::Default::default()
    }

    // required string name = 2;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string repository = 3;

    pub fn repository(&self) -> &str {
        match self.repository.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_repository(&mut self) {
        self.repository = ::std::option::Option::None;
    }

    pub fn has_repository(&self) -> bool {
        self.repository.is_some()
    }

    // Param is passed by value, moved
    pub fn set_repository(&mut self, v: ::std::string::String) {
        self.repository = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repository(&mut self) -> &mut ::std::string::String {
        if self.repository.is_none() {
            self.repository = ::std::option::Option::Some(::std::string::String::new());
        }
        self.repository.as_mut().unwrap()
    }

    // Take field
    pub fn take_repository(&mut self) -> ::std::string::String {
        self.repository.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "releases",
            |m: &Package| { &m.releases },
            |m: &mut Package| { &mut m.releases },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &Package| { &m.name },
            |m: &mut Package| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "repository",
            |m: &Package| { &m.repository },
            |m: &mut Package| { &mut m.repository },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Package>(
            "Package",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Package {
    const NAME: &'static str = "Package";

    fn is_initialized(&self) -> bool {
        if self.name.is_none() {
            return false;
        }
        if self.repository.is_none() {
            return false;
        }
        for v in &self.releases {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.releases.push(is.read_message()?);
                },
                18 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.repository = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.releases {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.repository.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.releases {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.repository.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Package {
        Package::new()
    }

    fn clear(&mut self) {
        self.releases.clear();
        self.name = ::std::option::Option::None;
        self.repository = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Package {
        static instance: Package = Package {
            releases: ::std::vec::Vec::new(),
            name: ::std::option::Option::None,
            repository: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Package {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Package").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Package {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Package {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Release)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Release {
    // message fields
    // @@protoc_insertion_point(field:Release.version)
    pub version: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:Release.inner_checksum)
    pub inner_checksum: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:Release.dependencies)
    pub dependencies: ::std::vec::Vec<Dependency>,
    // @@protoc_insertion_point(field:Release.retired)
    pub retired: ::protobuf::MessageField<RetirementStatus>,
    // @@protoc_insertion_point(field:Release.outer_checksum)
    pub outer_checksum: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:Release.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Release {
    fn default() -> &'a Release {
        <Release as ::protobuf::Message>::default_instance()
    }
}

impl Release {
    pub fn new() -> Release {
        ::std::default::Default::default()
    }

    // required string version = 1;

    pub fn version(&self) -> &str {
        match self.version.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        if self.version.is_none() {
            self.version = ::std::option::Option::Some(::std::string::String::new());
        }
        self.version.as_mut().unwrap()
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        self.version.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required bytes inner_checksum = 2;

    pub fn inner_checksum(&self) -> &[u8] {
        match self.inner_checksum.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_inner_checksum(&mut self) {
        self.inner_checksum = ::std::option::Option::None;
    }

    pub fn has_inner_checksum(&self) -> bool {
        self.inner_checksum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_inner_checksum(&mut self, v: ::std::vec::Vec<u8>) {
        self.inner_checksum = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inner_checksum(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.inner_checksum.is_none() {
            self.inner_checksum = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.inner_checksum.as_mut().unwrap()
    }

    // Take field
    pub fn take_inner_checksum(&mut self) -> ::std::vec::Vec<u8> {
        self.inner_checksum.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes outer_checksum = 5;

    pub fn outer_checksum(&self) -> &[u8] {
        match self.outer_checksum.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_outer_checksum(&mut self) {
        self.outer_checksum = ::std::option::Option::None;
    }

    pub fn has_outer_checksum(&self) -> bool {
        self.outer_checksum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_outer_checksum(&mut self, v: ::std::vec::Vec<u8>) {
        self.outer_checksum = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_outer_checksum(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.outer_checksum.is_none() {
            self.outer_checksum = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.outer_checksum.as_mut().unwrap()
    }

    // Take field
    pub fn take_outer_checksum(&mut self) -> ::std::vec::Vec<u8> {
        self.outer_checksum.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &Release| { &m.version },
            |m: &mut Release| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "inner_checksum",
            |m: &Release| { &m.inner_checksum },
            |m: &mut Release| { &mut m.inner_checksum },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "dependencies",
            |m: &Release| { &m.dependencies },
            |m: &mut Release| { &mut m.dependencies },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, RetirementStatus>(
            "retired",
            |m: &Release| { &m.retired },
            |m: &mut Release| { &mut m.retired },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "outer_checksum",
            |m: &Release| { &m.outer_checksum },
            |m: &mut Release| { &mut m.outer_checksum },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Release>(
            "Release",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Release {
    const NAME: &'static str = "Release";

    fn is_initialized(&self) -> bool {
        if self.version.is_none() {
            return false;
        }
        if self.inner_checksum.is_none() {
            return false;
        }
        for v in &self.dependencies {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.retired {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.version = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.inner_checksum = ::std::option::Option::Some(is.read_bytes()?);
                },
                26 => {
                    self.dependencies.push(is.read_message()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.retired)?;
                },
                42 => {
                    self.outer_checksum = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.version.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.inner_checksum.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        for value in &self.dependencies {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.retired.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.outer_checksum.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.version.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.inner_checksum.as_ref() {
            os.write_bytes(2, v)?;
        }
        for v in &self.dependencies {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.retired.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.outer_checksum.as_ref() {
            os.write_bytes(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Release {
        Release::new()
    }

    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.inner_checksum = ::std::option::Option::None;
        self.dependencies.clear();
        self.retired.clear();
        self.outer_checksum = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Release {
        static instance: Release = Release {
            version: ::std::option::Option::None,
            inner_checksum: ::std::option::Option::None,
            dependencies: ::std::vec::Vec::new(),
            retired: ::protobuf::MessageField::none(),
            outer_checksum: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Release {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Release").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Release {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Release {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:RetirementStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RetirementStatus {
    // message fields
    // @@protoc_insertion_point(field:RetirementStatus.reason)
    pub reason: ::std::option::Option<::protobuf::EnumOrUnknown<RetirementReason>>,
    // @@protoc_insertion_point(field:RetirementStatus.message)
    pub message: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:RetirementStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RetirementStatus {
    fn default() -> &'a RetirementStatus {
        <RetirementStatus as ::protobuf::Message>::default_instance()
    }
}

impl RetirementStatus {
    pub fn new() -> RetirementStatus {
        ::std::default::Default::default()
    }

    // required .RetirementReason reason = 1;

    pub fn reason(&self) -> RetirementReason {
        match self.reason {
            Some(e) => e.enum_value_or(RetirementReason::RETIRED_OTHER),
            None => RetirementReason::RETIRED_OTHER,
        }
    }

    pub fn clear_reason(&mut self) {
        self.reason = ::std::option::Option::None;
    }

    pub fn has_reason(&self) -> bool {
        self.reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: RetirementReason) {
        self.reason = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional string message = 2;

    pub fn message(&self) -> &str {
        match self.message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_message(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        if self.message.is_none() {
            self.message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        self.message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reason",
            |m: &RetirementStatus| { &m.reason },
            |m: &mut RetirementStatus| { &mut m.reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "message",
            |m: &RetirementStatus| { &m.message },
            |m: &mut RetirementStatus| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RetirementStatus>(
            "RetirementStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RetirementStatus {
    const NAME: &'static str = "RetirementStatus";

    fn is_initialized(&self) -> bool {
        if self.reason.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.reason = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.message = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.reason {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.message.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.reason {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.message.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RetirementStatus {
        RetirementStatus::new()
    }

    fn clear(&mut self) {
        self.reason = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RetirementStatus {
        static instance: RetirementStatus = RetirementStatus {
            reason: ::std::option::Option::None,
            message: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RetirementStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RetirementStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RetirementStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RetirementStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Dependency)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Dependency {
    // message fields
    // @@protoc_insertion_point(field:Dependency.package)
    pub package: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:Dependency.requirement)
    pub requirement: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:Dependency.optional)
    pub optional: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:Dependency.app)
    pub app: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:Dependency.repository)
    pub repository: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:Dependency.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Dependency {
    fn default() -> &'a Dependency {
        <Dependency as ::protobuf::Message>::default_instance()
    }
}

impl Dependency {
    pub fn new() -> Dependency {
        ::std::default::Default::default()
    }

    // required string package = 1;

    pub fn package(&self) -> &str {
        match self.package.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_package(&mut self) {
        self.package = ::std::option::Option::None;
    }

    pub fn has_package(&self) -> bool {
        self.package.is_some()
    }

    // Param is passed by value, moved
    pub fn set_package(&mut self, v: ::std::string::String) {
        self.package = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_package(&mut self) -> &mut ::std::string::String {
        if self.package.is_none() {
            self.package = ::std::option::Option::Some(::std::string::String::new());
        }
        self.package.as_mut().unwrap()
    }

    // Take field
    pub fn take_package(&mut self) -> ::std::string::String {
        self.package.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string requirement = 2;

    pub fn requirement(&self) -> &str {
        match self.requirement.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_requirement(&mut self) {
        self.requirement = ::std::option::Option::None;
    }

    pub fn has_requirement(&self) -> bool {
        self.requirement.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requirement(&mut self, v: ::std::string::String) {
        self.requirement = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_requirement(&mut self) -> &mut ::std::string::String {
        if self.requirement.is_none() {
            self.requirement = ::std::option::Option::Some(::std::string::String::new());
        }
        self.requirement.as_mut().unwrap()
    }

    // Take field
    pub fn take_requirement(&mut self) -> ::std::string::String {
        self.requirement.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool optional = 3;

    pub fn optional(&self) -> bool {
        self.optional.unwrap_or(false)
    }

    pub fn clear_optional(&mut self) {
        self.optional = ::std::option::Option::None;
    }

    pub fn has_optional(&self) -> bool {
        self.optional.is_some()
    }

    // Param is passed by value, moved
    pub fn set_optional(&mut self, v: bool) {
        self.optional = ::std::option::Option::Some(v);
    }

    // optional string app = 4;

    pub fn app(&self) -> &str {
        match self.app.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_app(&mut self) {
        self.app = ::std::option::Option::None;
    }

    pub fn has_app(&self) -> bool {
        self.app.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app(&mut self, v: ::std::string::String) {
        self.app = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app(&mut self) -> &mut ::std::string::String {
        if self.app.is_none() {
            self.app = ::std::option::Option::Some(::std::string::String::new());
        }
        self.app.as_mut().unwrap()
    }

    // Take field
    pub fn take_app(&mut self) -> ::std::string::String {
        self.app.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string repository = 5;

    pub fn repository(&self) -> &str {
        match self.repository.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_repository(&mut self) {
        self.repository = ::std::option::Option::None;
    }

    pub fn has_repository(&self) -> bool {
        self.repository.is_some()
    }

    // Param is passed by value, moved
    pub fn set_repository(&mut self, v: ::std::string::String) {
        self.repository = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repository(&mut self) -> &mut ::std::string::String {
        if self.repository.is_none() {
            self.repository = ::std::option::Option::Some(::std::string::String::new());
        }
        self.repository.as_mut().unwrap()
    }

    // Take field
    pub fn take_repository(&mut self) -> ::std::string::String {
        self.repository.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "package",
            |m: &Dependency| { &m.package },
            |m: &mut Dependency| { &mut m.package },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "requirement",
            |m: &Dependency| { &m.requirement },
            |m: &mut Dependency| { &mut m.requirement },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "optional",
            |m: &Dependency| { &m.optional },
            |m: &mut Dependency| { &mut m.optional },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "app",
            |m: &Dependency| { &m.app },
            |m: &mut Dependency| { &mut m.app },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "repository",
            |m: &Dependency| { &m.repository },
            |m: &mut Dependency| { &mut m.repository },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Dependency>(
            "Dependency",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Dependency {
    const NAME: &'static str = "Dependency";

    fn is_initialized(&self) -> bool {
        if self.package.is_none() {
            return false;
        }
        if self.requirement.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.package = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.requirement = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.optional = ::std::option::Option::Some(is.read_bool()?);
                },
                34 => {
                    self.app = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.repository = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.package.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.requirement.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.optional {
            my_size += 1 + 1;
        }
        if let Some(v) = self.app.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.repository.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.package.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.requirement.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.optional {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.app.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.repository.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Dependency {
        Dependency::new()
    }

    fn clear(&mut self) {
        self.package = ::std::option::Option::None;
        self.requirement = ::std::option::Option::None;
        self.optional = ::std::option::Option::None;
        self.app = ::std::option::Option::None;
        self.repository = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Dependency {
        static instance: Dependency = Dependency {
            package: ::std::option::Option::None,
            requirement: ::std::option::Option::None,
            optional: ::std::option::Option::None,
            app: ::std::option::Option::None,
            repository: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Dependency {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Dependency").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Dependency {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Dependency {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:RetirementReason)
pub enum RetirementReason {
    // @@protoc_insertion_point(enum_value:RetirementReason.RETIRED_OTHER)
    RETIRED_OTHER = 0,
    // @@protoc_insertion_point(enum_value:RetirementReason.RETIRED_INVALID)
    RETIRED_INVALID = 1,
    // @@protoc_insertion_point(enum_value:RetirementReason.RETIRED_SECURITY)
    RETIRED_SECURITY = 2,
    // @@protoc_insertion_point(enum_value:RetirementReason.RETIRED_DEPRECATED)
    RETIRED_DEPRECATED = 3,
    // @@protoc_insertion_point(enum_value:RetirementReason.RETIRED_RENAMED)
    RETIRED_RENAMED = 4,
}

impl ::protobuf::Enum for RetirementReason {
    const NAME: &'static str = "RetirementReason";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RetirementReason> {
        match value {
            0 => ::std::option::Option::Some(RetirementReason::RETIRED_OTHER),
            1 => ::std::option::Option::Some(RetirementReason::RETIRED_INVALID),
            2 => ::std::option::Option::Some(RetirementReason::RETIRED_SECURITY),
            3 => ::std::option::Option::Some(RetirementReason::RETIRED_DEPRECATED),
            4 => ::std::option::Option::Some(RetirementReason::RETIRED_RENAMED),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<RetirementReason> {
        match str {
            "RETIRED_OTHER" => ::std::option::Option::Some(RetirementReason::RETIRED_OTHER),
            "RETIRED_INVALID" => ::std::option::Option::Some(RetirementReason::RETIRED_INVALID),
            "RETIRED_SECURITY" => ::std::option::Option::Some(RetirementReason::RETIRED_SECURITY),
            "RETIRED_DEPRECATED" => ::std::option::Option::Some(RetirementReason::RETIRED_DEPRECATED),
            "RETIRED_RENAMED" => ::std::option::Option::Some(RetirementReason::RETIRED_RENAMED),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [RetirementReason] = &[
        RetirementReason::RETIRED_OTHER,
        RetirementReason::RETIRED_INVALID,
        RetirementReason::RETIRED_SECURITY,
        RetirementReason::RETIRED_DEPRECATED,
        RetirementReason::RETIRED_RENAMED,
    ];
}

impl ::protobuf::EnumFull for RetirementReason {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("RetirementReason").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for RetirementReason {
    fn default() -> Self {
        RetirementReason::RETIRED_OTHER
    }
}

impl RetirementReason {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<RetirementReason>("RetirementReason")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rpackage.proto\"c\n\x07Package\x12$\n\x08releases\x18\x01\x20\x03(\
    \x0b2\x08.ReleaseR\x08releases\x12\x12\n\x04name\x18\x02\x20\x02(\tR\x04\
    name\x12\x1e\n\nrepository\x18\x03\x20\x02(\tR\nrepository\"\xcf\x01\n\
    \x07Release\x12\x18\n\x07version\x18\x01\x20\x02(\tR\x07version\x12%\n\
    \x0einner_checksum\x18\x02\x20\x02(\x0cR\rinnerChecksum\x12/\n\x0cdepend\
    encies\x18\x03\x20\x03(\x0b2\x0b.DependencyR\x0cdependencies\x12+\n\x07r\
    etired\x18\x04\x20\x01(\x0b2\x11.RetirementStatusR\x07retired\x12%\n\x0e\
    outer_checksum\x18\x05\x20\x01(\x0cR\routerChecksum\"W\n\x10RetirementSt\
    atus\x12)\n\x06reason\x18\x01\x20\x02(\x0e2\x11.RetirementReasonR\x06rea\
    son\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message\"\x96\x01\n\nDep\
    endency\x12\x18\n\x07package\x18\x01\x20\x02(\tR\x07package\x12\x20\n\
    \x0brequirement\x18\x02\x20\x02(\tR\x0brequirement\x12\x1a\n\x08optional\
    \x18\x03\x20\x01(\x08R\x08optional\x12\x10\n\x03app\x18\x04\x20\x01(\tR\
    \x03app\x12\x1e\n\nrepository\x18\x05\x20\x01(\tR\nrepository*}\n\x10Ret\
    irementReason\x12\x11\n\rRETIRED_OTHER\x10\0\x12\x13\n\x0fRETIRED_INVALI\
    D\x10\x01\x12\x14\n\x10RETIRED_SECURITY\x10\x02\x12\x16\n\x12RETIRED_DEP\
    RECATED\x10\x03\x12\x13\n\x0fRETIRED_RENAMED\x10\x04\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(Package::generated_message_descriptor_data());
            messages.push(Release::generated_message_descriptor_data());
            messages.push(RetirementStatus::generated_message_descriptor_data());
            messages.push(Dependency::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(RetirementReason::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
